[{"C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\index.js":"1","C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\App.js":"2","C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\RollerCoasterList.js":"3","C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\AmusementParkList.js":"4","C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\RollerCoasterDetail.js":"5","C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\AmusementParkDetail.js":"6","C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\Nav.js":"7","C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\SearchBar.js":"8"},{"size":198,"mtime":1633207320895,"results":"9","hashOfConfig":"10"},{"size":991,"mtime":1633463792823,"results":"11","hashOfConfig":"10"},{"size":3468,"mtime":1633488563547,"results":"12","hashOfConfig":"10"},{"size":2196,"mtime":1633464332821,"results":"13","hashOfConfig":"10"},{"size":1930,"mtime":1633485675385,"results":"14","hashOfConfig":"10"},{"size":3342,"mtime":1633488652081,"results":"15","hashOfConfig":"10"},{"size":645,"mtime":1633406880359,"results":"16","hashOfConfig":"10"},{"size":570,"mtime":1633415609415,"results":"17","hashOfConfig":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12d872e",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"14czmpr","C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\index.js",[],"C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\App.js",[],"C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\RollerCoasterList.js",["40"],"import React, {useState, useEffect} from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport {Box, AppBar, Toolbar, Grid, Card, CircularProgress, CardMedia, CardContent, Typography, CardActionArea} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Rating from '@material-ui/lab/Rating';\r\n\r\nconst useStyles = makeStyles({\r\n    RollerCoasterContainer: {\r\n        paddingTop: '20px',\r\n        paddingLeft: '50px',\r\n        paddingRight: '50px'\r\n    },\r\n    cardContainer:{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    cardMedia: {\r\n        \r\n    },\r\n    cardContent: {\r\n    }\r\n})\r\n\r\n\r\nconst RollerCoasterList = () => {\r\n    const API_URL = `http://localhost:8080/api/v1/roller-coasters`\r\n    const classes = useStyles()\r\n    const [rollerCoasterData, setRollerCoasterData] = useState([]);\r\n\r\n    const getRollerCoasterRating = (rollerCoaster) => {\r\n        return rollerCoaster.votes === 0 ? 0 :\r\n        rollerCoaster.score/rollerCoaster.votes; \r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        fetchRollerCoasters();\r\n    }, [])\r\n\r\n    const fetchRollerCoasters = async () => {\r\n        const data = await fetch(API_URL);\r\n        const rollerCoasterData = await data.json();\r\n        console.log(rollerCoasterData)\r\n        setRollerCoasterData(rollerCoasterData);\r\n    }\r\n\r\n\r\n    const getRollerCoasterCard = (rollerCoaster) => {\r\n        return(\r\n            <Grid item xs={12} sm={12} key={rollerCoaster.rollerCoasterName}>\r\n                <Card>\r\n                    <CardActionArea component = {Link} to = {`/roller-coasters/${rollerCoaster.rollerCoasterName}/${rollerCoaster.amusementParkName}`}>\r\n                        <Box className={classes.cardContainer}>\r\n                            <CardMedia \r\n                                className={classes.cardMedia}\r\n                                style={{ width: \"130px\", height: \"130px\"}}\r\n                                image=\"https://static.wikia.nocookie.net/logopedia/images/0/09/Incredicoaster.jpg/revision/latest/scale-to-width-down/933?cb=20190224114016\"\r\n                            />\r\n                            <CardContent className={classes.cardContent}>\r\n                                <Typography>{rollerCoaster.rollerCoasterName}</Typography>\r\n                                <Box>\r\n                                    <Rating value = {Number(getRollerCoasterRating(rollerCoaster))} readOnly precision={0.1}/>\r\n                                    <Box>{rollerCoaster.votes === 0 ? \"No Rating\" : Number(getRollerCoasterRating(rollerCoaster)).toFixed(2) + \" / 5\"}</Box>\r\n                                </Box>\r\n                                <Typography>{`${rollerCoaster.votes} votes`}</Typography>\r\n                            </CardContent>\r\n                        </Box>\r\n                    </CardActionArea>\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar />\r\n            </AppBar>\r\n            {rollerCoasterData ? (\r\n            <Grid container spacing={1} className={classes.RollerCoasterContainer}>\r\n                {rollerCoasterData.map(\r\n                    (rollerCoaster) =>\r\n                    getRollerCoasterCard(rollerCoaster)\r\n            )}\r\n            </Grid>\r\n            ) : (\r\n                <CircularProgress/>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RollerCoasterList\r\n\r\n","C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\AmusementParkList.js",["41"],"import React, {useState, useEffect} from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport {AppBar, Toolbar, Grid, Card, CircularProgress, CardMedia, CardContent, Typography, CardActionArea} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Rating from '@material-ui/lab/Rating';\r\n\r\nconst useStyles = makeStyles({\r\n    AmusementParkContainer: {\r\n        paddingTop: '20px',\r\n        paddingLeft: '50px',\r\n        paddingRight: '50px'\r\n    }\r\n})\r\n\r\n\r\nconst AmusementParkList = () => {\r\n    const API_URL = \"http://localhost:8080/api/v1/amusement-parks\"\r\n    const classes = useStyles()\r\n    const [amusementParks, setAmusementParks] = useState([]);\r\n    \r\n\r\n\r\n    useEffect(() => {\r\n        fetchAmusementParks();\r\n    }, [])\r\n\r\n    const fetchAmusementParks = async () => {\r\n        const data = await fetch(API_URL);\r\n        const amusementParks = await data.json();\r\n        console.log(amusementParks);\r\n        setAmusementParks(amusementParks);\r\n    }\r\n\r\n    const getAmusementParkCard = (AmusementPark) => {\r\n        return(\r\n            <Grid item xs={12} sm={4} key={AmusementPark}>\r\n                <Card>\r\n                    <CardActionArea component = {Link} to = {`/amusement-parks/${AmusementPark}`}>\r\n                        <CardMedia\r\n                            style={{ width: \"130px\", height: \"130px\"}}\r\n                        />\r\n                        <CardContent>\r\n                            <Typography>{AmusementPark}</Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar />\r\n            </AppBar>\r\n            {amusementParks ? (\r\n            <Grid container spacing={5} className={classes.AmusementParkContainer}>\r\n                {amusementParks.map(\r\n                    (amusementPark) =>\r\n                    getAmusementParkCard(amusementPark)\r\n            )}\r\n            </Grid>\r\n            ) : (\r\n                <CircularProgress/>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AmusementParkList\r\n","C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\RollerCoasterDetail.js",["42"],"import React, {useState, useEffect} from 'react';\r\nimport Rating from '@material-ui/lab/Rating';\r\n\r\nconst RollerCoasterDetail = ( {match} ) => {\r\n\r\n    const [rollerCoaster, setRollerCoaster] = useState({});\r\n\r\n    const getRollerCoasterRating = () => {\r\n        return rollerCoaster.votes === 0 ? \"No Rating\" :\r\n        Number(rollerCoaster.score/rollerCoaster.votes).toFixed(2) + \" / 5\"; \r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchRollerCoaster()\r\n    }, [])\r\n\r\n    const fetchRollerCoaster = async () => {\r\n        const fetchRollerCoaster = await fetch(\r\n            `http://localhost:8080/api/v1/roller-coasters?roller-coaster-name=${match.params.rollerCoasterName}&amusement-park-name=${match.params.amusementParkName}`\r\n            )\r\n        const rollerCoaster = await fetchRollerCoaster.json();\r\n        setRollerCoaster(rollerCoaster);\r\n        console.log(rollerCoaster);\r\n    }\r\n\r\n    const rateRollerCoaster = async (score) => {\r\n        rollerCoaster.score += score;\r\n        rollerCoaster.votes++;\r\n        const data = await fetch(`http://localhost:8080/api/v1/roller-coasters?roller-coaster-name=${match.params.rollerCoasterName}&amusement-park-name=${match.params.amusementParkName}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(rollerCoaster),\r\n            headers: {\r\n                'content-type' : 'application/json'\r\n            }\r\n        })\r\n        console.log(data);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>{rollerCoaster.rollerCoasterName}</h1>\r\n            <h2>{rollerCoaster.amusementParkName}</h2>\r\n            <h3>{getRollerCoasterRating()}</h3>\r\n            <h3>{rollerCoaster.votes + \" total votes\"}</h3>\r\n\r\n            <Rating\r\n                onChange = {(event, score) => {\r\n                            rateRollerCoaster(score);\r\n                        }}\r\n            />\r\n\r\n        </div>\r\n        \r\n\r\n    )\r\n}\r\n\r\nexport default RollerCoasterDetail\r\n","C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\AmusementParkDetail.js",["43"],"import React, {useState, useEffect} from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport {Box, AppBar, Toolbar, Grid, Card, CircularProgress, CardMedia, CardContent, Typography, CardActionArea} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Rating from '@material-ui/lab/Rating';\r\n\r\nconst useStyles = makeStyles({\r\n    RollerCoasterContainer: {\r\n        paddingTop: '20px',\r\n        paddingLeft: '50px',\r\n        paddingRight: '50px'\r\n    },\r\n    cardMedia: {\r\n        margin: \"auto\",\r\n    },\r\n    cardContent: {\r\n        textAlign: \"center\",\r\n    }\r\n})\r\n\r\n\r\nconst RollerCoasterList = ( {match} ) => {\r\n    const API_URL = `http://localhost:8080/api/v1/amusement-parks/?amusement-park-name=${match.params.amusementParkName}`\r\n    const classes = useStyles()\r\n    const [rollerCoasterData, setRollerCoasterData] = useState([]);\r\n\r\n    const getRollerCoasterRating = (rollerCoaster) => {\r\n        return rollerCoaster.votes === 0 ? 0 :\r\n        rollerCoaster.score/rollerCoaster.votes; \r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        fetchRollerCoasters();\r\n    }, [])\r\n\r\n    const fetchRollerCoasters = async () => {\r\n        const data = await fetch(API_URL);\r\n        const rollerCoasterData = await data.json();\r\n        console.log(rollerCoasterData)\r\n        setRollerCoasterData(rollerCoasterData);\r\n    }\r\n\r\n\r\n    const getRollerCoasterCard = (rollerCoaster) => {\r\n        return(\r\n            <Grid item xs={12} sm={4} key={rollerCoaster.rollerCoasterName}>\r\n                <Card>\r\n                    <CardActionArea component = {Link} to = {`/roller-coasters/${rollerCoaster.rollerCoasterName}/${rollerCoaster.amusementParkName}`}>\r\n                        <CardMedia\r\n                            className={classes.cardMedia}\r\n                            style={{ width: \"130px\", height: \"130px\"}}\r\n                            image=\"https://static.wikia.nocookie.net/logopedia/images/0/09/Incredicoaster.jpg/revision/latest/scale-to-width-down/933?cb=20190224114016\"\r\n                        />\r\n                        <CardContent className={classes.cardContent}>\r\n                            <Typography>{rollerCoaster.rollerCoasterName}</Typography>\r\n                            <Box>\r\n                                <Rating value = {Number(getRollerCoasterRating(rollerCoaster))} readOnly precision={0.1}/>\r\n                                <Box>{rollerCoaster.votes === 0 ? \"No Rating\" : Number(getRollerCoasterRating(rollerCoaster)).toFixed(2) + \" / 5\"}</Box>\r\n                            </Box>\r\n                            <Typography>{`${rollerCoaster.votes} votes`}</Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar />\r\n            </AppBar>\r\n            {rollerCoasterData ? (\r\n            <Grid container spacing={1} className={classes.RollerCoasterContainer}>\r\n                {rollerCoasterData.map(\r\n                    (rollerCoaster) =>\r\n                    getRollerCoasterCard(rollerCoaster)\r\n            )}\r\n            </Grid>\r\n            ) : (\r\n                <CircularProgress/>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RollerCoasterList\r\n\r\n\r\n","C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\Nav.js",[],"C:\\Users\\Tom\\IdeaProjects\\demo2\\src\\main\\frontend\\src\\SearchBar.js",[],["44","45"],{"ruleId":"46","severity":1,"message":"47","line":38,"column":8,"nodeType":"48","endLine":38,"endColumn":10,"suggestions":"49"},{"ruleId":"50","severity":1,"message":"51","line":5,"column":8,"nodeType":"52","messageId":"53","endLine":5,"endColumn":14},{"ruleId":"46","severity":1,"message":"54","line":15,"column":8,"nodeType":"48","endLine":15,"endColumn":10,"suggestions":"55"},{"ruleId":"46","severity":1,"message":"47","line":35,"column":8,"nodeType":"48","endLine":35,"endColumn":10,"suggestions":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchRollerCoasters'. Either include it or remove the dependency array.","ArrayExpression",["61"],"no-unused-vars","'Rating' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'fetchRollerCoaster'. Either include it or remove the dependency array.",["62"],["63"],"no-native-reassign",["64"],"no-negated-in-lhs",["65"],{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},{"desc":"66","fix":"70"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [fetchRollerCoasters]",{"range":"71","text":"72"},"Update the dependencies array to be: [fetchRollerCoaster]",{"range":"73","text":"74"},{"range":"75","text":"72"},[1085,1087],"[fetchRollerCoasters]",[461,463],"[fetchRollerCoaster]",[1108,1110]]