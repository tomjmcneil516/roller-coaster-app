{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\IdeaProjects\\\\demo2\\\\src\\\\main\\\\frontend\\\\src\\\\AmusementParkDetail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Box, AppBar, Toolbar, Grid, Card, CircularProgress, CardMedia, CardContent, Typography, CardActionArea } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Rating from '@material-ui/lab/Rating';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  RollerCoasterContainer: {\n    paddingTop: '20px',\n    paddingLeft: '50px',\n    paddingRight: '50px'\n  },\n  cardMedia: {\n    margin: \"auto\"\n  },\n  cardContent: {\n    textAlign: \"center\"\n  }\n});\n\nconst RollerCoasterList = ({\n  match\n}) => {\n  _s();\n\n  const API_URL = `http://localhost:8080/api/v1/amusement-parks/?amusement-park-name=${match.params.amusementParkName}`;\n  const classes = useStyles();\n  const [rollerCoasterData, setRollerCoasterData] = useState([]);\n\n  const getRollerCoasterRating = rollerCoaster => {\n    return rollerCoaster.votes === 0 ? 0 : rollerCoaster.score / rollerCoaster.votes;\n  };\n\n  useEffect(() => {\n    fetchRollerCoasters();\n  }, []);\n\n  const fetchRollerCoasters = async () => {\n    const data = await fetch(API_URL);\n    const rollerCoasterData = await data.json();\n    console.log(rollerCoasterData);\n    setRollerCoasterData(rollerCoasterData);\n  };\n\n  const getRollerCoasterCard = rollerCoaster => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardActionArea, {\n          component: Link,\n          to: `/roller-coasters/${rollerCoaster.rollerCoasterName}/${rollerCoaster.amusementParkName}`,\n          children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n            className: classes.cardMedia,\n            style: {\n              width: \"130px\",\n              height: \"130px\"\n            },\n            image: \"https://static.wikia.nocookie.net/logopedia/images/0/09/Incredicoaster.jpg/revision/latest/scale-to-width-down/933?cb=20190224114016\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            className: classes.cardContent,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              children: rollerCoaster.rollerCoasterName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Rating, {\n                value: Number(getRollerCoasterRating(rollerCoaster)),\n                readOnly: true,\n                precision: 0.1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                children: Number(getRollerCoasterRating(rollerCoaster)).toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: `${rollerCoaster.votes} votes`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, rollerCoaster.rollerCoasterName, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), rollerCoasterData ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      className: classes.RollerCoasterContainer,\n      children: rollerCoasterData.map(rollerCoaster => getRollerCoasterCard(rollerCoaster))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RollerCoasterList, \"jtyGjmigZ3w1SP/H09dTD6cF2EQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = RollerCoasterList;\nexport default RollerCoasterList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RollerCoasterList\");","map":{"version":3,"sources":["C:/Users/Tom/IdeaProjects/demo2/src/main/frontend/src/AmusementParkDetail.js"],"names":["React","useState","useEffect","Link","Box","AppBar","Toolbar","Grid","Card","CircularProgress","CardMedia","CardContent","Typography","CardActionArea","makeStyles","Rating","useStyles","RollerCoasterContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","textAlign","RollerCoasterList","match","API_URL","params","amusementParkName","classes","rollerCoasterData","setRollerCoasterData","getRollerCoasterRating","rollerCoaster","votes","score","fetchRollerCoasters","data","fetch","json","console","log","getRollerCoasterCard","rollerCoasterName","width","height","display","alignItems","justifyContent","Number","toFixed","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAAQC,GAAR,EAAaC,MAAb,EAAqBC,OAArB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,gBAA1C,EAA4DC,SAA5D,EAAuEC,WAAvE,EAAoFC,UAApF,EAAgGC,cAAhG,QAAqH,mBAArH;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;;;AAEA,MAAMC,SAAS,GAAGF,UAAU,CAAC;AACzBG,EAAAA,sBAAsB,EAAE;AACpBC,IAAAA,UAAU,EAAE,MADQ;AAEpBC,IAAAA,WAAW,EAAE,MAFO;AAGpBC,IAAAA,YAAY,EAAE;AAHM,GADC;AAMzBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,MAAM,EAAE;AADD,GANc;AASzBC,EAAAA,WAAW,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF;AATY,CAAD,CAA5B;;AAeA,MAAMC,iBAAiB,GAAG,CAAE;AAACC,EAAAA;AAAD,CAAF,KAAe;AAAA;;AACrC,QAAMC,OAAO,GAAI,qEAAoED,KAAK,CAACE,MAAN,CAAaC,iBAAkB,EAApH;AACA,QAAMC,OAAO,GAAGd,SAAS,EAAzB;AACA,QAAM,CAACe,iBAAD,EAAoBC,oBAApB,IAA4C/B,QAAQ,CAAC,EAAD,CAA1D;;AAEA,QAAMgC,sBAAsB,GAAIC,aAAD,IAAmB;AAC9C,WAAOA,aAAa,CAACC,KAAd,KAAwB,CAAxB,GAA4B,CAA5B,GACPD,aAAa,CAACE,KAAd,GAAoBF,aAAa,CAACC,KADlC;AAEH,GAHD;;AAMAjC,EAAAA,SAAS,CAAC,MAAM;AACZmC,IAAAA,mBAAmB;AACtB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,mBAAmB,GAAG,YAAY;AACpC,UAAMC,IAAI,GAAG,MAAMC,KAAK,CAACZ,OAAD,CAAxB;AACA,UAAMI,iBAAiB,GAAG,MAAMO,IAAI,CAACE,IAAL,EAAhC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYX,iBAAZ;AACAC,IAAAA,oBAAoB,CAACD,iBAAD,CAApB;AACH,GALD;;AAQA,QAAMY,oBAAoB,GAAIT,aAAD,IAAmB;AAC5C,wBACI,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,EAAE,EAAE,CAAvB;AAAA,6BACI,QAAC,IAAD;AAAA,+BACI,QAAC,cAAD;AAAgB,UAAA,SAAS,EAAI/B,IAA7B;AAAmC,UAAA,EAAE,EAAK,oBAAmB+B,aAAa,CAACU,iBAAkB,IAAGV,aAAa,CAACL,iBAAkB,EAAhI;AAAA,kCACI,QAAC,SAAD;AACI,YAAA,SAAS,EAAEC,OAAO,CAACT,SADvB;AAEI,YAAA,KAAK,EAAE;AAAEwB,cAAAA,KAAK,EAAE,OAAT;AAAkBC,cAAAA,MAAM,EAAE;AAA1B,aAFX;AAGI,YAAA,KAAK,EAAC;AAHV;AAAA;AAAA;AAAA;AAAA,kBADJ,eAMI,QAAC,WAAD;AAAa,YAAA,SAAS,EAAEhB,OAAO,CAACP,WAAhC;AAAA,oCACI,QAAC,UAAD;AAAA,wBAAaW,aAAa,CAACU;AAA3B;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,GAAD;AAAK,cAAA,EAAE,EAAE;AACLG,gBAAAA,OAAO,EAAE,MADJ;AAELC,gBAAAA,UAAU,EAAE,QAFP;AAGLC,gBAAAA,cAAc,EAAE;AAHX,eAAT;AAAA,sCAKI,QAAC,MAAD;AAAQ,gBAAA,KAAK,EAAIC,MAAM,CAACjB,sBAAsB,CAACC,aAAD,CAAvB,CAAvB;AAAgE,gBAAA,QAAQ,MAAxE;AAAyE,gBAAA,SAAS,EAAE;AAApF;AAAA;AAAA;AAAA;AAAA,sBALJ,eAMI,QAAC,GAAD;AAAA,0BAAMgB,MAAM,CAACjB,sBAAsB,CAACC,aAAD,CAAvB,CAAN,CAA8CiB,OAA9C,CAAsD,CAAtD;AAAN;AAAA;AAAA;AAAA;AAAA,sBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAUI,QAAC,UAAD;AAAA,wBAAc,GAAEjB,aAAa,CAACC,KAAM;AAApC;AAAA;AAAA;AAAA;AAAA,oBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,OAA+BD,aAAa,CAACU,iBAA7C;AAAA;AAAA;AAAA;AAAA,YADJ;AAyBH,GA1BD;;AA4BA,sBACI;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAC,QAAjB;AAAA,6BACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,EAIKb,iBAAiB,gBAClB,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAA4B,MAAA,SAAS,EAAED,OAAO,CAACb,sBAA/C;AAAA,gBACKc,iBAAiB,CAACqB,GAAlB,CACIlB,aAAD,IACAS,oBAAoB,CAACT,aAAD,CAFvB;AADL;AAAA;AAAA;AAAA;AAAA,YADkB,gBAQd,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,YAZR;AAAA,kBADJ;AAiBH,CApED;;GAAMT,iB;UAEcT,S;;;KAFdS,iB;AAsEN,eAAeA,iBAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport {Box, AppBar, Toolbar, Grid, Card, CircularProgress, CardMedia, CardContent, Typography, CardActionArea} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Rating from '@material-ui/lab/Rating';\r\n\r\nconst useStyles = makeStyles({\r\n    RollerCoasterContainer: {\r\n        paddingTop: '20px',\r\n        paddingLeft: '50px',\r\n        paddingRight: '50px'\r\n    },\r\n    cardMedia: {\r\n        margin: \"auto\",\r\n    },\r\n    cardContent: {\r\n        textAlign: \"center\",\r\n    }\r\n})\r\n\r\n\r\nconst RollerCoasterList = ( {match} ) => {\r\n    const API_URL = `http://localhost:8080/api/v1/amusement-parks/?amusement-park-name=${match.params.amusementParkName}`\r\n    const classes = useStyles()\r\n    const [rollerCoasterData, setRollerCoasterData] = useState([]);\r\n\r\n    const getRollerCoasterRating = (rollerCoaster) => {\r\n        return rollerCoaster.votes === 0 ? 0 :\r\n        rollerCoaster.score/rollerCoaster.votes; \r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        fetchRollerCoasters();\r\n    }, [])\r\n\r\n    const fetchRollerCoasters = async () => {\r\n        const data = await fetch(API_URL);\r\n        const rollerCoasterData = await data.json();\r\n        console.log(rollerCoasterData)\r\n        setRollerCoasterData(rollerCoasterData);\r\n    }\r\n\r\n\r\n    const getRollerCoasterCard = (rollerCoaster) => {\r\n        return(\r\n            <Grid item xs={12} sm={4} key={rollerCoaster.rollerCoasterName}>\r\n                <Card>\r\n                    <CardActionArea component = {Link} to = {`/roller-coasters/${rollerCoaster.rollerCoasterName}/${rollerCoaster.amusementParkName}`}>\r\n                        <CardMedia\r\n                            className={classes.cardMedia}\r\n                            style={{ width: \"130px\", height: \"130px\"}}\r\n                            image=\"https://static.wikia.nocookie.net/logopedia/images/0/09/Incredicoaster.jpg/revision/latest/scale-to-width-down/933?cb=20190224114016\"\r\n                        />\r\n                        <CardContent className={classes.cardContent}>\r\n                            <Typography>{rollerCoaster.rollerCoasterName}</Typography>\r\n                            <Box sx={{\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                justifyContent: 'center'\r\n                             }}>\r\n                                <Rating value = {Number(getRollerCoasterRating(rollerCoaster))} readOnly precision={0.1}></Rating>\r\n                                <Box>{Number(getRollerCoasterRating(rollerCoaster)).toFixed(2)}</Box>\r\n                            </Box>\r\n                            <Typography>{`${rollerCoaster.votes} votes`}</Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar />\r\n            </AppBar>\r\n            {rollerCoasterData ? (\r\n            <Grid container spacing={5} className={classes.RollerCoasterContainer}>\r\n                {rollerCoasterData.map(\r\n                    (rollerCoaster) =>\r\n                    getRollerCoasterCard(rollerCoaster)\r\n            )}\r\n            </Grid>\r\n            ) : (\r\n                <CircularProgress/>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RollerCoasterList\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}