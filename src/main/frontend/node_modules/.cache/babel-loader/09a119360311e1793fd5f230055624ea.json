{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\IdeaProjects\\\\demo2\\\\src\\\\main\\\\frontend\\\\src\\\\AmusementParkDetail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { AppBar, Toolbar, Grid, Card, CircularProgress, CardMedia, CardContent } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  RollerCoasterContainer: {\n    paddingTop: '20px',\n    paddingLeft: '50px',\n    paddingRight: '50px'\n  }\n});\n\nconst RollerCoasterList = ({\n  match\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [RollerCoasters, setRollerCoasters] = useState([]);\n  useEffect(() => {\n    console.log(match);\n    fetchRollerCoasters();\n  }, []);\n\n  const fetchRollerCoasters = async () => {\n    const data = await fetch(`http://localhost:8080/api/v1/amusement-parks/?amusement-park-name=${match.params.amusementParkName}`);\n    const RollerCoasters = await data.json();\n    console.log(RollerCoasters);\n    setRollerCoasters(RollerCoasters);\n  };\n\n  const getRollerCoasterCard = rollerCoasterID => {\n    const {\n      rollerCoasterName,\n      Votes\n    } = RollerCoasters[`${rollerCoasterID}`];\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: \"hi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, rollerCoasterID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), RollerCoasters ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      className: classes.RollerCoasterContainer,\n      children: Object.keys(RollerCoasters).map(rollerCoasterName => getRollerCoasterCard(rollerCoasterName))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this), RollerCoasters.map(RollerCoaster => /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: `/roller-coasters/${RollerCoaster.rollerCoasterName}/${RollerCoaster.amusementParkName}`,\n        children: RollerCoaster.rollerCoasterName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, RollerCoaster.amusementParkName + RollerCoaster.rollerCoasterName, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true);\n};\n\n_s(RollerCoasterList, \"ATJh8jYdci1/GqLoeDEMS7WP8f8=\", false, function () {\n  return [useStyles];\n});\n\n_c = RollerCoasterList;\nexport default RollerCoasterList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RollerCoasterList\");","map":{"version":3,"sources":["C:/Users/Tom/IdeaProjects/demo2/src/main/frontend/src/AmusementParkDetail.js"],"names":["React","useState","useEffect","Link","AppBar","Toolbar","Grid","Card","CircularProgress","CardMedia","CardContent","makeStyles","useStyles","RollerCoasterContainer","paddingTop","paddingLeft","paddingRight","RollerCoasterList","match","classes","RollerCoasters","setRollerCoasters","console","log","fetchRollerCoasters","data","fetch","params","amusementParkName","json","getRollerCoasterCard","rollerCoasterID","rollerCoasterName","Votes","Object","keys","map","RollerCoaster"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport {AppBar, Toolbar, Grid, Card, CircularProgress, CardMedia, CardContent} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    RollerCoasterContainer: {\r\n        paddingTop: '20px',\r\n        paddingLeft: '50px',\r\n        paddingRight: '50px'\r\n    }\r\n})\r\n\r\n\r\nconst RollerCoasterList = ( {match} ) => {\r\n    const classes = useStyles()\r\n    const [RollerCoasters, setRollerCoasters] = useState([]);\r\n\r\n    useEffect(() => {\r\n        console.log(match)\r\n        fetchRollerCoasters();\r\n    }, [])\r\n\r\n    const fetchRollerCoasters = async () => {\r\n        const data = await fetch(`http://localhost:8080/api/v1/amusement-parks/?amusement-park-name=${match.params.amusementParkName}`);\r\n        const RollerCoasters = await data.json();\r\n        console.log(RollerCoasters);\r\n        setRollerCoasters(RollerCoasters);\r\n    }\r\n\r\n\r\n    const getRollerCoasterCard = (rollerCoasterID) => {\r\n        const { rollerCoasterName, Votes} = RollerCoasters[`${rollerCoasterID}`]\r\n        return(\r\n            <Grid item xs={12} sm={4} key={rollerCoasterID}>\r\n                <Card>\r\n                    <CardContent>\r\n                        hi\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar />\r\n            </AppBar>\r\n            {RollerCoasters ? (\r\n            <Grid container spacing={5} className={classes.RollerCoasterContainer}>\r\n                {Object.keys(RollerCoasters).map(\r\n                    (rollerCoasterName) =>\r\n                    getRollerCoasterCard(rollerCoasterName)\r\n            )}\r\n            </Grid>\r\n            ) : (\r\n                <CircularProgress/>\r\n            )}\r\n\r\n\r\n            {RollerCoasters.map(RollerCoaster => (\r\n            <h1 key={RollerCoaster.amusementParkName + RollerCoaster.rollerCoasterName}>\r\n                <Link to={`/roller-coasters/${RollerCoaster.rollerCoasterName}/${RollerCoaster.amusementParkName}`}>\r\n                    {RollerCoaster.rollerCoasterName}\r\n                </Link>\r\n            </h1>))}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RollerCoasterList\r\n"]},"metadata":{},"sourceType":"module"}