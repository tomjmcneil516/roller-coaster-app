{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\IdeaProjects\\\\demo2\\\\src\\\\main\\\\frontend\\\\src\\\\AmusementParkDetail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { AppBar, Toolbar, Grid, Card, CircularProgress, CardMedia, CardContent, Typography, CardActionArea } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  RollerCoasterContainer: {\n    paddingTop: '20px',\n    paddingLeft: '50px',\n    paddingRight: '50px'\n  }\n});\n\nconst RollerCoasterList = ({\n  match\n}) => {\n  _s();\n\n  const API_URL = `http://localhost:8080/api/v1/amusement-parks/?amusement-park-name=${match.params.amusementParkName}`;\n  const classes = useStyles();\n  const [rollerCoasterData, setRollerCoasterData] = useState([]);\n\n  const getRollerCoasterRating = () => {\n    return rollerCoasterData.votes === 0 ? 0 : Number(rollerCoasterData.score / rollerCoaster.votes).toFixed(2);\n  };\n\n  useEffect(() => {\n    fetchRollerCoasters();\n  }, []);\n\n  const fetchRollerCoasters = async () => {\n    const data = await fetch(API_URL);\n    const rollerCoasterData = await data.json();\n    console.log(rollerCoasterData);\n    setRollerCoasterData(rollerCoasterData);\n  };\n\n  const getRollerCoasterCard = rollerCoaster => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardActionArea, {\n          component: Link,\n          to: `/roller-coasters/${rollerCoaster.rollerCoasterName}/${rollerCoaster.amusementParkName}`,\n          children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n            style: {\n              width: \"130px\",\n              height: \"130px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              children: rollerCoaster.rollerCoasterName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Rating, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, rollerCoaster.rollerCoasterName, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), rollerCoasterData ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      className: classes.RollerCoasterContainer,\n      children: rollerCoasterData.map(rollerCoaster => getRollerCoasterCard(rollerCoaster))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RollerCoasterList, \"jtyGjmigZ3w1SP/H09dTD6cF2EQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = RollerCoasterList;\nexport default RollerCoasterList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RollerCoasterList\");","map":{"version":3,"sources":["C:/Users/Tom/IdeaProjects/demo2/src/main/frontend/src/AmusementParkDetail.js"],"names":["React","useState","useEffect","Link","AppBar","Toolbar","Grid","Card","CircularProgress","CardMedia","CardContent","Typography","CardActionArea","makeStyles","useStyles","RollerCoasterContainer","paddingTop","paddingLeft","paddingRight","RollerCoasterList","match","API_URL","params","amusementParkName","classes","rollerCoasterData","setRollerCoasterData","getRollerCoasterRating","votes","Number","score","rollerCoaster","toFixed","fetchRollerCoasters","data","fetch","json","console","log","getRollerCoasterCard","rollerCoasterName","width","height","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport {AppBar, Toolbar, Grid, Card, CircularProgress, CardMedia, CardContent, Typography, CardActionArea} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    RollerCoasterContainer: {\r\n        paddingTop: '20px',\r\n        paddingLeft: '50px',\r\n        paddingRight: '50px'\r\n    }\r\n})\r\n\r\n\r\nconst RollerCoasterList = ( {match} ) => {\r\n    const API_URL = `http://localhost:8080/api/v1/amusement-parks/?amusement-park-name=${match.params.amusementParkName}`\r\n    const classes = useStyles()\r\n    const [rollerCoasterData, setRollerCoasterData] = useState([]);\r\n\r\n    const getRollerCoasterRating = () => {\r\n        return rollerCoasterData.votes === 0 ? 0 :\r\n        Number(rollerCoasterData.score/rollerCoaster.votes).toFixed(2); \r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        fetchRollerCoasters();\r\n    }, [])\r\n\r\n    const fetchRollerCoasters = async () => {\r\n        const data = await fetch(API_URL);\r\n        const rollerCoasterData = await data.json();\r\n        console.log(rollerCoasterData)\r\n        setRollerCoasterData(rollerCoasterData);\r\n    }\r\n\r\n\r\n    const getRollerCoasterCard = (rollerCoaster) => {\r\n        return(\r\n            <Grid item xs={12} sm={4} key={rollerCoaster.rollerCoasterName}>\r\n                <Card>\r\n                    <CardActionArea component = {Link} to = {`/roller-coasters/${rollerCoaster.rollerCoasterName}/${rollerCoaster.amusementParkName}`}>\r\n                        <CardMedia\r\n                            style={{ width: \"130px\", height: \"130px\"}}\r\n                        />\r\n                        <CardContent>\r\n                            <Typography>{rollerCoaster.rollerCoasterName}</Typography>\r\n                            <Rating></Rating>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar />\r\n            </AppBar>\r\n            {rollerCoasterData ? (\r\n            <Grid container spacing={5} className={classes.RollerCoasterContainer}>\r\n                {rollerCoasterData.map(\r\n                    (rollerCoaster) =>\r\n                    getRollerCoasterCard(rollerCoaster)\r\n            )}\r\n            </Grid>\r\n            ) : (\r\n                <CircularProgress/>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RollerCoasterList\r\n"]},"metadata":{},"sourceType":"module"}