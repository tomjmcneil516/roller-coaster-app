{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\IdeaProjects\\\\demo2\\\\src\\\\main\\\\frontend\\\\src\\\\AmusementParkList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { AppBar, Toolbar, Grid, Card, CircularProgress, CardMedia, CardContent, Typography, CardActionArea } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  AmusementParkContainer: {\n    paddingTop: '20px',\n    paddingLeft: '50px',\n    paddingRight: '50px'\n  }\n});\n\nconst AmusementParkList = () => {\n  _s();\n\n  const API_URL = \"http://localhost:8080/api/v1/amusement-parks\";\n  const classes = useStyles();\n  const [amusementParks, setAmusementParks] = useState([]);\n\n  const getRollerCoasterRating = () => {\n    return rollerCoaster.votes === 0 ? \"No Rating\" : Number(rollerCoaster.score / rollerCoaster.votes).toFixed(2) + \" / 5\";\n  };\n\n  useEffect(() => {\n    fetchAmusementParks();\n  }, []);\n\n  const fetchAmusementParks = async () => {\n    const data = await fetch(API_URL);\n    const amusementParks = await data.json();\n    console.log(amusementParks);\n    setAmusementParks(amusementParks);\n  };\n\n  const getAmusementParkCard = AmusementPark => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardActionArea, {\n          component: Link,\n          to: `/amusement-parks/${AmusementPark}`,\n          children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n            style: {\n              width: \"130px\",\n              height: \"130px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              children: AmusementPark\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, AmusementPark, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), amusementParks ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      className: classes.AmusementParkContainer,\n      children: amusementParks.map(amusementPark => getAmusementParkCard(amusementPark))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AmusementParkList, \"kV/JJWSdeh19bYkmjR4vAl1JBjU=\", false, function () {\n  return [useStyles];\n});\n\n_c = AmusementParkList;\nexport default AmusementParkList;\n\nvar _c;\n\n$RefreshReg$(_c, \"AmusementParkList\");","map":{"version":3,"sources":["C:/Users/Tom/IdeaProjects/demo2/src/main/frontend/src/AmusementParkList.js"],"names":["React","useState","useEffect","Link","AppBar","Toolbar","Grid","Card","CircularProgress","CardMedia","CardContent","Typography","CardActionArea","makeStyles","useStyles","AmusementParkContainer","paddingTop","paddingLeft","paddingRight","AmusementParkList","API_URL","classes","amusementParks","setAmusementParks","getRollerCoasterRating","rollerCoaster","votes","Number","score","toFixed","fetchAmusementParks","data","fetch","json","console","log","getAmusementParkCard","AmusementPark","width","height","map","amusementPark"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport {AppBar, Toolbar, Grid, Card, CircularProgress, CardMedia, CardContent, Typography, CardActionArea} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    AmusementParkContainer: {\r\n        paddingTop: '20px',\r\n        paddingLeft: '50px',\r\n        paddingRight: '50px'\r\n    }\r\n})\r\n\r\n\r\nconst AmusementParkList = () => {\r\n    const API_URL = \"http://localhost:8080/api/v1/amusement-parks\"\r\n    const classes = useStyles()\r\n    const [amusementParks, setAmusementParks] = useState([]);\r\n    const getRollerCoasterRating = () => {\r\n        return rollerCoaster.votes === 0 ? \"No Rating\" :\r\n        Number(rollerCoaster.score/rollerCoaster.votes).toFixed(2) + \" / 5\"; \r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        fetchAmusementParks();\r\n    }, [])\r\n\r\n    const fetchAmusementParks = async () => {\r\n        const data = await fetch(API_URL);\r\n        const amusementParks = await data.json();\r\n        console.log(amusementParks);\r\n        setAmusementParks(amusementParks);\r\n    }\r\n\r\n    const getAmusementParkCard = (AmusementPark) => {\r\n        return(\r\n            <Grid item xs={12} sm={4} key={AmusementPark}>\r\n                <Card>\r\n                    <CardActionArea component = {Link} to = {`/amusement-parks/${AmusementPark}`}>\r\n                        <CardMedia\r\n                            style={{ width: \"130px\", height: \"130px\"}}\r\n                        />\r\n                        <CardContent>\r\n                            <Typography>{AmusementPark}</Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar />\r\n            </AppBar>\r\n            {amusementParks ? (\r\n            <Grid container spacing={5} className={classes.AmusementParkContainer}>\r\n                {amusementParks.map(\r\n                    (amusementPark) =>\r\n                    getAmusementParkCard(amusementPark)\r\n            )}\r\n            </Grid>\r\n            ) : (\r\n                <CircularProgress/>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AmusementParkList\r\n"]},"metadata":{},"sourceType":"module"}