{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Tom/IdeaProjects/demo2/src/main/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Tom/IdeaProjects/demo2/src/main/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/Tom/IdeaProjects/demo2/src/main/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Link}from'react-router-dom';import{Box,AppBar,Toolbar,Grid,Card,CircularProgress,CardMedia,CardContent,Typography,CardActionArea}from\"@material-ui/core\";import{makeStyles}from\"@material-ui/core/styles\";import Rating from'@material-ui/lab/Rating';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var useStyles=makeStyles({RollerCoasterContainer:{paddingTop:'20px',paddingLeft:'50px',paddingRight:'50px'},cardContainer:{display:'flex',alignItems:'center'},cardMedia:{},cardContent:{}});var RollerCoasterList=function RollerCoasterList(){var API_URL=\"http://localhost:8080/api/v1/roller-coasters\";var classes=useStyles();var _useState=useState([]),_useState2=_slicedToArray(_useState,2),rollerCoasterData=_useState2[0],setRollerCoasterData=_useState2[1];var getRollerCoasterRating=function getRollerCoasterRating(rollerCoaster){return rollerCoaster.votes===0?0:rollerCoaster.score/rollerCoaster.votes;};useEffect(function(){fetchRollerCoasters();},[]);var fetchRollerCoasters=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var data,rollerCoasterData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(API_URL);case 2:data=_context.sent;_context.next=5;return data.json();case 5:rollerCoasterData=_context.sent;console.log(rollerCoasterData);setRollerCoasterData(rollerCoasterData);case 8:case\"end\":return _context.stop();}}},_callee);}));return function fetchRollerCoasters(){return _ref.apply(this,arguments);};}();var getRollerCoasterCard=function getRollerCoasterCard(rollerCoaster){return/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sm:12,children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(CardActionArea,{component:Link,to:\"/roller-coasters/\".concat(rollerCoaster.rollerCoasterName,\"/\").concat(rollerCoaster.amusementParkName),children:/*#__PURE__*/_jsxs(Box,{className:classes.cardContainer,children:[/*#__PURE__*/_jsx(CardMedia,{className:classes.cardMedia,style:{width:\"130px\",height:\"130px\"},image:\"https://static.wikia.nocookie.net/logopedia/images/0/09/Incredicoaster.jpg/revision/latest/scale-to-width-down/933?cb=20190224114016\"}),/*#__PURE__*/_jsxs(CardContent,{className:classes.cardContent,children:[/*#__PURE__*/_jsx(Typography,{children:rollerCoaster.rollerCoasterName}),/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Rating,{value:Number(getRollerCoasterRating(rollerCoaster)),readOnly:true,precision:0.1}),/*#__PURE__*/_jsx(Box,{children:rollerCoaster.votes===0?\"No Rating\":Number(getRollerCoasterRating(rollerCoaster)).toFixed(2)+\" / 5\"})]}),/*#__PURE__*/_jsx(Typography,{children:\"\".concat(rollerCoaster.votes,\" votes\")})]})]})})})},rollerCoaster.rollerCoasterName);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(AppBar,{position:\"static\",children:/*#__PURE__*/_jsx(Toolbar,{})}),rollerCoasterData?/*#__PURE__*/_jsx(Grid,{container:true,spacing:1,className:classes.RollerCoasterContainer,children:rollerCoasterData.map(function(rollerCoaster){return getRollerCoasterCard(rollerCoaster);})}):/*#__PURE__*/_jsx(CircularProgress,{})]});};export default RollerCoasterList;","map":{"version":3,"sources":["C:/Users/Tom/IdeaProjects/demo2/src/main/frontend/src/RollerCoasterList.js"],"names":["React","useState","useEffect","Link","Box","AppBar","Toolbar","Grid","Card","CircularProgress","CardMedia","CardContent","Typography","CardActionArea","makeStyles","Rating","useStyles","RollerCoasterContainer","paddingTop","paddingLeft","paddingRight","cardContainer","display","alignItems","cardMedia","cardContent","RollerCoasterList","API_URL","classes","rollerCoasterData","setRollerCoasterData","getRollerCoasterRating","rollerCoaster","votes","score","fetchRollerCoasters","fetch","data","json","console","log","getRollerCoasterCard","rollerCoasterName","amusementParkName","width","height","Number","toFixed","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport {Box, AppBar, Toolbar, Grid, Card, CircularProgress, CardMedia, CardContent, Typography, CardActionArea} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Rating from '@material-ui/lab/Rating';\r\n\r\nconst useStyles = makeStyles({\r\n    RollerCoasterContainer: {\r\n        paddingTop: '20px',\r\n        paddingLeft: '50px',\r\n        paddingRight: '50px'\r\n    },\r\n    cardContainer:{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    cardMedia: {\r\n        \r\n    },\r\n    cardContent: {\r\n    }\r\n})\r\n\r\n\r\nconst RollerCoasterList = () => {\r\n    const API_URL = `http://localhost:8080/api/v1/roller-coasters`\r\n    const classes = useStyles()\r\n    const [rollerCoasterData, setRollerCoasterData] = useState([]);\r\n\r\n    const getRollerCoasterRating = (rollerCoaster) => {\r\n        return rollerCoaster.votes === 0 ? 0 :\r\n        rollerCoaster.score/rollerCoaster.votes; \r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        fetchRollerCoasters();\r\n    }, [])\r\n\r\n    const fetchRollerCoasters = async () => {\r\n        const data = await fetch(API_URL);\r\n        const rollerCoasterData = await data.json();\r\n        console.log(rollerCoasterData)\r\n        setRollerCoasterData(rollerCoasterData);\r\n    }\r\n\r\n\r\n    const getRollerCoasterCard = (rollerCoaster) => {\r\n        return(\r\n            <Grid item xs={12} sm={12} key={rollerCoaster.rollerCoasterName}>\r\n                <Card>\r\n                    <CardActionArea component = {Link} to = {`/roller-coasters/${rollerCoaster.rollerCoasterName}/${rollerCoaster.amusementParkName}`}>\r\n                        <Box className={classes.cardContainer}>\r\n                            <CardMedia \r\n                                className={classes.cardMedia}\r\n                                style={{ width: \"130px\", height: \"130px\"}}\r\n                                image=\"https://static.wikia.nocookie.net/logopedia/images/0/09/Incredicoaster.jpg/revision/latest/scale-to-width-down/933?cb=20190224114016\"\r\n                            />\r\n                            <CardContent className={classes.cardContent}>\r\n                                <Typography>{rollerCoaster.rollerCoasterName}</Typography>\r\n                                <Box>\r\n                                    <Rating value = {Number(getRollerCoasterRating(rollerCoaster))} readOnly precision={0.1}/>\r\n                                    <Box>{rollerCoaster.votes === 0 ? \"No Rating\" : Number(getRollerCoasterRating(rollerCoaster)).toFixed(2) + \" / 5\"}</Box>\r\n                                </Box>\r\n                                <Typography>{`${rollerCoaster.votes} votes`}</Typography>\r\n                            </CardContent>\r\n                        </Box>\r\n                    </CardActionArea>\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar />\r\n            </AppBar>\r\n            {rollerCoasterData ? (\r\n            <Grid container spacing={1} className={classes.RollerCoasterContainer}>\r\n                {rollerCoasterData.map(\r\n                    (rollerCoaster) =>\r\n                    getRollerCoasterCard(rollerCoaster)\r\n            )}\r\n            </Grid>\r\n            ) : (\r\n                <CircularProgress/>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RollerCoasterList\r\n\r\n"]},"metadata":{},"sourceType":"module"}